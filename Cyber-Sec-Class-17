# Here we will discuss about Application Security :
===================================================

Waht is Application Security :
==============================
  Application security refers to the practice of protecting software applications from threats and vulnerabilities throughout the entire development lifecycle. 
  It involves implementing security measures and best practices to ensure that applications are secure against unauthorized access, data breaches, and other cyber threats.

Topics under Application Security :
-----------------------------------
  1. SDLC and SSDLC Life cycle
  2. WAF
  3. Cryptography 
  4. OWASP TOP 10

Explanation :
============
1. SDLC and SSDLC Life cycle :
==============================
  *. SDLC LifeCycle :
  -------------------
     SDLC stands for Software Development Lifecycle. It's a structured process for developing software applications that ensures high quality and reliability while managing costs and time effectively. 
    
     Phases on SDLC LifeCycle:
     -------------------------
        The SDLC typically consists of several phases, each with its own set of activities and deliverables:
           Requirements Gathering: This phase involves gathering and analyzing requirements from stakeholders to understand what the software needs to accomplish.
           Planning: In this phase, project goals, timelines, resources, and risks are identified and a plan is created outlining how the project will be executed.
           Design: The design phase involves creating detailed technical specifications based on the requirements gathered earlier. This includes architecture design, database design, user interface design, etc.
           Implementation (Coding): During this phase, the actual code for the software is written based on the design specifications. Developers follow coding standards and best practices to ensure code quality and maintainability.
           Testing: Testing is an essential phase where the software is thoroughly tested to identify and fix defects. This includes unit testing, integration testing, system testing, and user acceptance testing.
           Deployment: Once testing is complete and the software is deemed ready for release, it is deployed to the production environment where users can access it.
           Maintenance: After deployment, the software enters the maintenance phase where it is monitored, updated, and patched to fix any issues that arise and to add new features or enhancements.

  *. SSDLC LifeCycle :
  --------------------
     SSDLC, or Secure Software Development Lifecycle, is a variation of the traditional SDLC that incorporates security practices and considerations throughout the software development process. SSDLC aims to build security into the software from the ground up rather than addressing it as an afterthought. 

     Phases on SSDLC LifeCycle:
     ---------------------------
       It typically includes the following security-focused activities integrated into each phase of the SDLC:
          Security Requirements: In the requirements gathering phase, security requirements are identified and documented alongside functional requirements. This ensures that security considerations are taken into account from the outset.
          Threat Modeling: During the design phase, threat modeling is performed to identify potential security threats and vulnerabilities in the software architecture. This helps inform design decisions and prioritize security controls.
          Secure Coding Practices: In the implementation phase, developers follow secure coding practices to mitigate common security vulnerabilities such as injection flaws, authentication issues, and insecure cryptographic practices By using code/vulnarability scanning tools like snyk and TPS scanning and other open sources tools.
          Security Testing: Security testing is integrated into the testing phase to identify and remediate security vulnerabilities such as SQL injection, cross-site scripting (XSS), and security misconfigurations by doing penetration testing & others.
          Security Review: Before deployment, the software undergoes a security review or audit to ensure that security requirements have been adequately addressed and that the software meets security standards and best practices.
          Security Monitoring: After deployment, the software is continuously monitored for security threats and vulnerabilities, and proactive measures are taken to mitigate risks and protect against attacks.

# Indepth Explanation of SSDLC Lifecycle :
==========================================
   * Requirement : Security team will understand the requirement whatever the feature we are going to deliver.
   * Design      : In the Design phase security team will take care of Threat modeling.
                   Threat modeling meaning means : 
                     Threat modeling is a structured approach used to identify and prioritize potential threats and vulnerabilities associated with a system, application, or organization. 
                     It is a proactive process that helps organizations understand their security risks and make informed decisions about how to mitigate them.
                     
                   Most of the organizations follows the MICROSOFT STRIDE for identify and categorize potential security threats and vulnerabilities in software systems as part of Threat modeling.
                   MICROSOFT STRIDE :
                   ------------------
                     Here's a brief overview of the STRIDE model and its purpose:
                       Spoofing Identity      : This category refers to threats where an attacker attempts to impersonate a legitimate user or system entity to gain unauthorized access to resources or perform malicious actions.
                                                The purpose of addressing spoofing identity threats is to ensure that systems can accurately verify the identity of users and entities and prevent unauthorized access.
                       Tampering with Data    : This category involves threats where an attacker attempts to modify, delete, or insert data to disrupt system operations, steal sensitive information, or gain unauthorized privileges.
                                                The purpose of addressing tampering with data threats is to ensure the integrity and confidentiality of data within the system.
                       Repudiation            : Repudiation threats occur when an attacker denies performing a specific action or transaction, making it difficult to hold them accountable for their actions. 
                                                The purpose of addressing repudiation threats is to implement measures that provide accountability and non-repudiation, such as auditing and logging mechanisms.
                       Information Disclosure : Information disclosure threats involve unauthorized access to sensitive information, such as personal data, financial records, or intellectual property.
                                                The purpose of addressing information disclosure threats is to implement controls that protect sensitive information from unauthorized access or disclosure.
                       Denial of Service (DoS): Denial of service threats involve attacks that aim to disrupt or degrade the availability of a system or service, making it inaccessible to legitimate users. 
                                                The purpose of addressing denial of service threats is to implement measures that mitigate the impact of such attacks and ensure the availability and reliability of the system.
                       Elevation of Privilege : Elevation of privilege threats occur when an attacker gains unauthorized access to higher levels of privilege or permissions within a system, allowing them to perform actions they are not authorized to do. 
                                                The purpose of addressing elevation of privilege threats is to implement strong access control mechanisms and least privilege principles to limit the scope of potential attacks.

  * Development  : On the develepment side whatever the code developed by developer we will test the code level security agianst OWASP top 10 by using multiple tools, SAST(Static application security testing) also called a SCA(Static composition analysis) it's like a code scanning.

                  # Note Below whatever the tools we have discussed all these tools will works under code level vulnerability/security scan only, It's not for phishing, spoofing, flooding, Authentication, Malware scanning tool.
                  
                   Some of the SAST(Static application security testing) also called a SCA(Static composition analysis) code scanning tools : 
                   ------------------------------------------------------------------------------------------------------------------------
                     IBM App Scan, HP fortify, Checkmarx, Veracode & etc.
                     Whenever we run the scan, The scan will run againist OWASP top 10 and Generates a reports on html, pdf, json formats, If any vulnarubility is there then will create a JIRA to the development team to fix that Security defects.

                   TPS(Third party Software) :
                   ---------------------------
                     Mostly every organization is using 2 types of 3rd party softwares
                     1. Open Source (Java, Apache, Tomcat, OpenJDK, Angular)
                     2. Commercial  (RMQ, NGINX, Keyvault, Postgresql & etc).

                   TPS(Third party Software) tools :
                   ---------------------------------
                      * White source.
                      * Black duck.
                   These two tools will helps to identify the vulnerabilities and also these tools will helps to identify the latest versions(example java-7 deprecated, So it'll identify and create a jira to the team.
 
  * Testing      : Security testing side Most of the organizations will do 3 types of testings.
                   * Block Box penetration testing  :
                        > In black box testing, the tester has no prior knowledge of the target system's architecture, design, or source code. It simulates an outsider's perspective, where the attacker has no internal knowledge of the system.
                   * Grey Box  penetration testing  :
                        > Grey box testing combines elements of both black box and white box testing. Testers have partial knowledge of the internal workings of the system, such as architecture or design, but they don't have access to the source code.  
                   * White Box penetration testing  : 
                        > White box testing, also known as clear box or glass box testing, involves full access to the internal workings of the target system, including source code, architecture diagrams, and other sensitive information.
                 
  * Release      : Security Sign off, After all tests are passed then the code will release to the customer.

2. WAF(Web Application Firewall) :
==================================
    A Web Application Firewall (WAF) is a security tool designed to protect web applications by filtering and monitoring HTTP traffic between a web application and the Internet. 
    WAf it will prevent aginst layer number 7 (applcation layer attacks), as per OSI layers and also it will block OWASP top 10 category of the attacks(application layer attacks).
    Its purpose is to detect and prevent various types of attacks targeting web applications, such as SQL injection, cross-site scripting (XSS), cross-site request forgery (CSRF), and other common vulnerabilities.

    Detection Methods of WAF :
    ==========================
      WAF has capable to detect the threats by using Both
      * Signature Method and * Mechine Learning/AI.
      Based on these methods it'll detect and send an alert to their respective teams.

   WAF Tools : 
   ===========
      AKAMAI, IMPERVA, F5, AWS WAF, AZURE APPLICATION GATEWAY.

  Best tools for Vunlerability scanning :
  =======================================
  * Nessus  :  It can scan networks, systems, and applications for a wide range of vulnerabilities, misconfigurations, and compliance issues. Nessus offers both free and commercial versions, with the latter providing more advanced features and support. 
  * AWS Inspector from amazon side
  * Azure Inspector from Azure side

3. Cryptography :
=================
    Cryptography enables the encryption of data to ensure that only authorized parties can access and decipher it. Encryption transforms plaintext (readable data) into ciphertext (unreadable data) using mathematical algorithms and keys.
    Secure communication channels, such as Virtual Private Networks (VPNs), Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocols, and encrypted messaging applications, rely on cryptography to protect sensitive information from eavesdropping and interception by malicious actors.

  Examples of Cryptography :
  =========================
     * Encryption 
     * Decryption

  Types of Cryptography :
  =======================
     * Symentric 
     * Asymentric
     * Hybrid

Explincation :
=============
 Cryptography is the science and art of secure communication in the presence of adversaries. Here's a brief overview of the types of cryptography you mentioned along with their meanings, purposes, and examples of how they work in application security:
 1. Symmetric Cryptography:
 --------------------------
    Meaning: Symmetric cryptography, also known as secret key cryptography, involves the use of a single key for both encryption and decryption. This means that both the sender and the recipient share the same secret key.
    Purpose: The main purpose of symmetric cryptography is to ensure confidentiality and integrity of data. It is typically used for encrypting large amounts of data efficiently.
    Example: The Advanced Encryption Standard (AES) is a widely used symmetric encryption algorithm. In application security, AES is commonly employed to encrypt sensitive data such as passwords, credit card numbers, and other personal information stored in databases or transmitted over networks.
 2. Asymmetric Cryptography:
 ---------------------------
    Meaning: Asymmetric cryptography, also known as public key cryptography, involves the use of a pair of keys: a public key and a private key. The public key is used for encryption, while the private key is used for decryption.
    Purpose: The main purpose of asymmetric cryptography is to provide secure communication over insecure channels and to authenticate the identities of communicating parties.
    Example: The RSA algorithm is a popular asymmetric encryption algorithm used for secure communication and digital signatures. In application security, RSA is commonly used to establish secure connections (e.g., HTTPS) between clients and servers, as well as for secure email communication and digital signatures.
 3. Hybrid Cryptography:
 -----------------------
    Meaning: Hybrid cryptography combines the strengths of both symmetric and asymmetric cryptography. In hybrid cryptography, symmetric encryption is used to encrypt the actual data, while asymmetric encryption is used to securely exchange the symmetric encryption key.
    Purpose: The purpose of hybrid cryptography is to address the key distribution problem inherent in symmetric cryptography while benefiting from its efficiency.
    Example: In SSL/TLS (Secure Sockets Layer/Transport Layer Security) protocol used for secure communication over the internet, hybrid cryptography is employed. 
             The symmetric encryption algorithm (e.g., AES) is used to encrypt the data transmitted between client and server, while asymmetric encryption (e.g., RSA) is used during the initial handshake to securely exchange the symmetric encryption key.

  Summary :
  ---------
   In application security, these cryptographic techniques play crucial roles in ensuring the confidentiality, integrity, and authenticity of sensitive data and communications. 
   They are essential components of secure communication protocols, data encryption mechanisms, and authentication systems used to protect against various threats such as eavesdropping, data tampering, and identity impersonation.

Major differences between Symmetric Cryptography and Asymmetric Cryptography :
===============================================================================
  * Key Management:
   ----------------
      Symmetric Cryptography: Requires secure distribution of the secret key between communicating parties. Key management can be more challenging, especially when dealing with a large number of keys.
      Asymmetric Cryptography: Uses a pair of keys (public and private). The public key can be freely distributed, while the private key must be kept secret. Asymmetric cryptography simplifies key management as only the public keys need to be distributed.
      Hybrid Cryptography: Hybrid cryptography combines symmetric and asymmetric techniques. Symmetric encryption is used for data encryption, while asymmetric encryption is used for securely exchanging the symmetric key. 
                           Key management involves securely distributing the public keys and managing the symmetric keys for each communication session.
  * Speed and Efficiency:
  ------------------------
      Symmetric Cryptography: Typically faster and more efficient than asymmetric cryptography, especially for encrypting large amounts of data.
      Asymmetric Cryptography: Slower and less efficient compared to symmetric cryptography due to complex mathematical operations involved, especially for key generation and decryption.
      Hybrid Cryptography: Hybrid cryptography combines the efficiency of symmetric encryption with the security benefits of asymmetric encryption, offering a balance between speed and security.

  * Security Strength:
  --------------------
      Symmetric Cryptography: The security strength depends solely on the length and randomness of the secret key. Longer keys provide higher security.
      Asymmetric Cryptography: The security strength depends on the mathematical complexity of the algorithm and the length of the keys. Typically, longer key lengths are required for equivalent security compared to symmetric cryptography.
      Hybrid Cryptography: Hybrid cryptography combines the security strengths of both symmetric and asymmetric cryptography. Symmetric encryption provides efficient bulk data encryption, while asymmetric encryption ensures secure key exchange. 
                           This combination offers strong security without sacrificing performance.
  * Use Cases:
  -------------
      Symmetric Cryptography: Ideal for encrypting large amounts of data efficiently, such as bulk data encryption, file encryption, and disk encryption.
      Asymmetric Cryptography: Primarily used for key exchange, digital signatures, and secure communication over insecure channels, such as secure email, SSL/TLS, and SSH.
      Hybrid Cryptography: Hybrid cryptography is used in scenarios where both efficiency and security are required, such as in SSL/TLS protocols, secure messaging applications, and secure file transfer protocols.

  * Resource Requirements:
  ------------------------
      Symmetric Cryptography: Requires less computational resources (e.g., processing power, memory) compared to asymmetric cryptography.
      Asymmetric Cryptography: Demands more computational resources due to the complexity of mathematical operations involved, which can be a consideration in resource-constrained environments.

  * Key Distribution:
  --------------------
      Symmetric Cryptography: Involves the challenge of securely distributing and managing secret keys among communicating parties.
      Asymmetric Cryptography: Simplifies key distribution as only public keys need to be distributed openly, while private keys remain secret.
      Hybrid Cryptography: Hybrid cryptography addresses the key distribution problem of symmetric cryptography by using asymmetric encryption to securely exchange symmetric keys.


# Interview Qns : [ https://interviewprep.org/application-security-interview-questions/ ]
=================
1. What is SSL/TLS mutual authentication ? 
      SSL/TLS mutual authentication, also known as two-way authentication or client authentication, is a security mechanism that allows both the server and the client to authenticate each other during the SSL/TLS handshake process. 
      In traditional SSL/TLS communication, only the server is authenticated to the client, ensuring that the client is connecting to the intended server. However, in mutual authentication, the client also presents a digital certificate to the server, allowing the server to verify the client's identity.
2. How SSL/TLS mutual authentication works:
      Let's consider a scenario where SSL/TLS mutual authentication is used between a client (such as a web browser) and a server (such as a web server).
      Here's how the process would typically unfold:
        Client Request:  A client, let's say a web browser, initiates a connection to a server (e.g., an online banking website) by sending a request.
        Server Response: The server responds to the client's request by presenting its digital certificate, which includes its public key and identifying information. This certificate is signed by a trusted Certificate Authority (CA), establishing the server's identity.
        Client Authentication Request:  In a typical SSL/TLS handshake, the client verifies the server's certificate against its list of trusted CAs. However, in mutual authentication, the server also requests the client to present its own digital certificate.
        Client Certificate Presentation: The client responds to the server's request by presenting its digital certificate, which contains its public key and identifying information. This certificate is also signed by a trusted CA, establishing the client's identity.
        Server Certificate Verification: The server verifies the client's certificate against its list of trusted CAs to ensure the client's authenticity. This verification involves checking the certificate's signature and validating its authenticity.
        Client Certificate Verification: Similarly, the client verifies the server's certificate against its list of trusted CAs to ensure the server's authenticity. This verification process involves checking the server's certificate signature and validating its authenticity.
        Establishment of Secure Connection: If both the server and the client successfully authenticate each other's identities, a secure connection is established between them. This secure connection is encrypted using symmetric encryption algorithms, and communication can proceed securely.
        Secure Communication: With the secure connection established, the client and the server can exchange sensitive information (such as login credentials, financial transactions, etc.) over the encrypted channel with confidence that they are communicating with trusted entities.
   
 3. Differrence Between Encryption and Hashing ?
      Encryption is a 2 way function, Reverse can be possible(Decryption).
      Digital representing of a file is calling as a Hashing value, and Hashing is a 1 way function only, So reverse can't be possible.

 4. Types of Hashing algorithms : 
      SHA-1 (Secure Hash Algorithm 1)  : SHA-1 is a cryptographic hash function that produces a 160-bit (20-byte) hash value. It was widely used for digital signatures, SSL/TLS certificates, and other security applications. However, SHA-1 is now considered weak due to vulnerabilities that allow for collision attacks.
      SHA-3 (Secure Hash Algorithm 3)  : SHA-3 is the latest member of the Secure Hash Algorithm family, standardized by the National Institute of Standards and Technology (NIST) in 2015. It provides hash values of various lengths, including SHA-3-256 (producing 256-bit hash values), SHA-3-384, and SHA-3-512. 
                                         SHA-3 is designed to provide increased security and resistance against cryptanalytic attacks compared to earlier hash functions. 
      MD5 (Message Digest Algorithm 5) : MD5 is a widely used hash function that produces a 128-bit (16-byte) hash value. It was developed in 1991 and has been extensively used for various applications, including checksums, digital signatures, and password storage.
                                         However, MD5 is now considered weak due to vulnerabilities that allow for collision attacks, where two different inputs produce the same hash value.
      SHA-256 (Secure Hash Algorithm 256-bit) : SHA-256 is a widely used cryptographic hash function that produces a 256-bit (32-byte) hash value. It belongs to the SHA-2 family of hash functions and is considered secure for various cryptographic applications, including digital signatures and data integrity verification.
                                                SHA-256 is commonly used in blockchain technology, digital certificates, and SSL/TLS protocols.

5. What is Birthday(Birday) attack ?
     If two diff files has same hash value then confilcts will occur, Those conflicts we will call it as Birthday attacks.

6. What is Mean by HMAC(Hash Message Authentication Code) ?

36th class at 45 min.

