# Here we will discuss about Application Security :
===================================================

Waht is Application Security :
==============================
  Application security refers to the practice of protecting software applications from threats and vulnerabilities throughout the entire development lifecycle. 
  It involves implementing security measures and best practices to ensure that applications are secure against unauthorized access, data breaches, and other cyber threats.

Topics under Application Security :
-----------------------------------
  1. SDLC and SSDLC Life cycle
  2. WAF
  3. OWASP TOP 10
  4. Cryptography 

Explanation :
============
1. SDLC and SSDLC Life cycle :
==============================
  *. SDLC LifeCycle :
  -------------------
     SDLC stands for Software Development Lifecycle. It's a structured process for developing software applications that ensures high quality and reliability while managing costs and time effectively. 
    
     Phases on SDLC LifeCycle:
     -------------------------
        The SDLC typically consists of several phases, each with its own set of activities and deliverables:
           Requirements Gathering: This phase involves gathering and analyzing requirements from stakeholders to understand what the software needs to accomplish.
           Planning: In this phase, project goals, timelines, resources, and risks are identified and a plan is created outlining how the project will be executed.
           Design: The design phase involves creating detailed technical specifications based on the requirements gathered earlier. This includes architecture design, database design, user interface design, etc.
           Implementation (Coding): During this phase, the actual code for the software is written based on the design specifications. Developers follow coding standards and best practices to ensure code quality and maintainability.
           Testing: Testing is an essential phase where the software is thoroughly tested to identify and fix defects. This includes unit testing, integration testing, system testing, and user acceptance testing.
           Deployment: Once testing is complete and the software is deemed ready for release, it is deployed to the production environment where users can access it.
           Maintenance: After deployment, the software enters the maintenance phase where it is monitored, updated, and patched to fix any issues that arise and to add new features or enhancements.

  *. SSDLC LifeCycle :
  --------------------
     SSDLC, or Secure Software Development Lifecycle, is a variation of the traditional SDLC that incorporates security practices and considerations throughout the software development process. SSDLC aims to build security into the software from the ground up rather than addressing it as an afterthought. 

     Phases on SSDLC LifeCycle:
     ---------------------------
       It typically includes the following security-focused activities integrated into each phase of the SDLC:
          Security Requirements: In the requirements gathering phase, security requirements are identified and documented alongside functional requirements. This ensures that security considerations are taken into account from the outset.
          Threat Modeling: During the design phase, threat modeling is performed to identify potential security threats and vulnerabilities in the software architecture. This helps inform design decisions and prioritize security controls.
          Secure Coding Practices: In the implementation phase, developers follow secure coding practices to mitigate common security vulnerabilities such as injection flaws, authentication issues, and insecure cryptographic practices By using code/vulnarability scanning tools like snyk and TPS scanning and other open sources tools.
          Security Testing: Security testing is integrated into the testing phase to identify and remediate security vulnerabilities such as SQL injection, cross-site scripting (XSS), and security misconfigurations by doing penetration testing & others.
          Security Review: Before deployment, the software undergoes a security review or audit to ensure that security requirements have been adequately addressed and that the software meets security standards and best practices.
          Security Monitoring: After deployment, the software is continuously monitored for security threats and vulnerabilities, and proactive measures are taken to mitigate risks and protect against attacks.

# Indepth Explanation of SSDLC Lifecycle :
==========================================
   * Requirement : Security team will understand the requirement whatever the feature we are going to deliver.
   * Design      : In the Design phase security team will take care of Threat modeling.
                   Threat modeling meaning means : 
                     Threat modeling is a structured approach used to identify and prioritize potential threats and vulnerabilities associated with a system, application, or organization. 
                     It is a proactive process that helps organizations understand their security risks and make informed decisions about how to mitigate them.
                     
                   Most of the organizations follows the MICROSOFT STRIDE for identify and categorize potential security threats and vulnerabilities in software systems as part of Threat modeling.
                   MICROSOFT STRIDE :
                   ------------------
                     Here's a brief overview of the STRIDE model and its purpose:
                       Spoofing Identity      : This category refers to threats where an attacker attempts to impersonate a legitimate user or system entity to gain unauthorized access to resources or perform malicious actions.
                                                The purpose of addressing spoofing identity threats is to ensure that systems can accurately verify the identity of users and entities and prevent unauthorized access.
                       Tampering with Data    : This category involves threats where an attacker attempts to modify, delete, or insert data to disrupt system operations, steal sensitive information, or gain unauthorized privileges.
                                                The purpose of addressing tampering with data threats is to ensure the integrity and confidentiality of data within the system.
                       Repudiation            : Repudiation threats occur when an attacker denies performing a specific action or transaction, making it difficult to hold them accountable for their actions. 
                                                The purpose of addressing repudiation threats is to implement measures that provide accountability and non-repudiation, such as auditing and logging mechanisms.
                       Information Disclosure : Information disclosure threats involve unauthorized access to sensitive information, such as personal data, financial records, or intellectual property.
                                                The purpose of addressing information disclosure threats is to implement controls that protect sensitive information from unauthorized access or disclosure.
                       Denial of Service (DoS): Denial of service threats involve attacks that aim to disrupt or degrade the availability of a system or service, making it inaccessible to legitimate users. 
                                                The purpose of addressing denial of service threats is to implement measures that mitigate the impact of such attacks and ensure the availability and reliability of the system.
                       Elevation of Privilege : Elevation of privilege threats occur when an attacker gains unauthorized access to higher levels of privilege or permissions within a system, allowing them to perform actions they are not authorized to do. 
                                                The purpose of addressing elevation of privilege threats is to implement strong access control mechanisms and least privilege principles to limit the scope of potential attacks.

  * Development  : On the develepment side whatever the code developed by developer we will test the code level security agianst OWASP top 10 by using multiple tools, SAST(Static application security testing) also called a SCA(Static composition analysis) it's like a code scanning.

                  # Note Below whatever the tools we have discussed all these tools will works under code level vulnerability/security scan only, It's not for phishing, spoofing, flooding, Authentication, Malware scanning tool.
                  
                   Some of the SAST(Static application security testing) also called a SCA(Static composition analysis) code scanning tools : 
                   ------------------------------------------------------------------------------------------------------------------------
                     IBM App Scan, HP fortify, Checkmarx, Veracode & etc.
                     Whenever we run the scan, The scan will run againist OWASP top 10 and Generates a reports on html, pdf, json formats, If any vulnarubility is there then will create a JIRA to the development team to fix that Security defects.

                   TPS(Third party Software) :
                   ---------------------------
                     Mostly every organization is using 2 types of 3rd party softwares
                     1. Open Source (Java, Apache, Tomcat, OpenJDK, Angular)
                     2. Commercial  (RMQ, NGINX, Keyvault, Postgresql & etc).

                   TPS(Third party Software) tools :
                   ---------------------------------
                      * White source.
                      * Black duck.
                   These two tools will helps to identify the vulnerabilities and also these tools will helps to identify the latest versions(example java-7 deprecated, So it'll identify and create a jira to the team.
 
  * Testing      : Security testing side Most of the organizations will do 3 types of testings.
                   * Block Box penetration testing  :
                        > In black box testing, the tester has no prior knowledge of the target system's architecture, design, or source code. It simulates an outsider's perspective, where the attacker has no internal knowledge of the system.
                   * Grey Box  penetration testing  :
                        > Grey box testing combines elements of both black box and white box testing. Testers have partial knowledge of the internal workings of the system, such as architecture or design, but they don't have access to the source code.  
                   * White Box penetration testing  : 
                        > White box testing, also known as clear box or glass box testing, involves full access to the internal workings of the target system, including source code, architecture diagrams, and other sensitive information.

                     
  * Release      : Security Sign off, After all tests are passed then the code will release to the customer.


2. WAF(Web Application Firewall) :
==================================
    A Web Application Firewall (WAF) is a security tool designed to protect web applications by filtering and monitoring HTTP traffic between a web application and the Internet. 
    WAf it will prevent aginst layer number 7 (applcation layer attacks), as per OSI layers and also it will block OWASP top 10 category of the attacks(application layer attacks).
    Its purpose is to detect and prevent various types of attacks targeting web applications, such as SQL injection, cross-site scripting (XSS), cross-site request forgery (CSRF), and other common vulnerabilities.


3. 






