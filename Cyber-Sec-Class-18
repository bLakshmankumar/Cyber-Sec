OWASP TOP 10
============
It's an organization will conduct a survey and list top 10 catagery of the attacks related to application layer(Layer num 7).
OWASP Conducted a survey on : 
=============================
2010, 2013, 2017, 2021.

# Will discuss top 10 attacks as per 2021 data [ https://owasp.org/Top10/ ] :
=============================================================================
    A01:2021-Broken Access Control 
         Definition: Broken access control refers to the failure to enforce proper restrictions on what authenticated users are allowed to do, leading to unauthorized access to sensitive data or functionality.
         Example Attack: An attacker could manipulate the URL or change parameters in a request to access unauthorized resources or perform actions not intended for their role, such as accessing another user's account information.
         Mitigation: Implement proper access controls, including role-based access control (RBAC), enforce least privilege principles, and perform regular security assessments and access control audits. For example, ensure that users can only access resources they are authorized to by checking their permissions and roles before granting access.
    A02:2021-Cryptographic Failures : 
         Cryptographic Failures refer to weaknesses or errors in cryptographic implementations, leading to vulnerabilities such as data breaches or system compromise.
         Mitigation: Use strong encryption algorithms and cryptographic protocols. Implement secure key management practices and ensure proper configuration of cryptographic libraries.
         Example: If an application stores passwords in plain text or uses weak encryption algorithms, it is vulnerable to cryptographic failures. 
                 would involve securely hashing passwords using algorithms like bcrypt and ensuring sensitive data is encrypted properly.
    A03:2021-Injection 
         Definition: Injection vulnerabilities occur when untrusted data is inserted into a command or query, allowing attackers to execute malicious code or commands.
                     94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%,
                     and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition.
         Mitigation: Use parameterized queries or prepared statements to prevent injection attacks. Implement input validation and sanitization to filter out malicious input.
         Example: SQL injection occurs when an attacker inserts malicious SQL commands into input fields, allowing them to retrieve sensitive data from the database or manipulate its contents.
    A04:2021-Insecure Design 
         Definition: Insecure Design refers to flaws in the design of an application that make it vulnerable to various attacks. These flaws cannot be fixed solely through code changes.
         Mitigation: Conduct thorough threat modeling and utilize secure design patterns and principles. Define security requirements early in the development process and ensure they are followed throughout.
         Example: If an application lacks proper authentication and authorization mechanisms from the beginning, it is vulnerable to insecure design. Mitigation involves redesigning the application architecture to incorporate secure authentication and authorization mechanisms.
   A05:2021-Security Misconfiguration 
         Definition: Security Misconfiguration occurs when security settings are improperly configured, leaving vulnerabilities exposed. This can include default configurations, unnecessary features enabled, or missing security patches.
         Mitigation: Follow security best practices for configuring servers, frameworks, and applications. Regularly audit configurations and apply security patches promptly.
         Example: Leaving default passwords unchanged or exposing sensitive information in error messages are examples of security misconfigurations. Mitigation involves changing default passwords and configuring error messages to reveal minimal information.
   A06:2021-Vulnerable and Outdated Components
         Definition: Vulnerable and Outdated Components refer to the usage of third-party libraries or software components with known security vulnerabilities.
         Mitigation: Regularly update and patch third-party components. Use automated tools to scan for vulnerabilities in dependencies and remove or replace outdated components.
         Example: Using an outdated version of a web framework with known security vulnerabilities exposes the application to potential exploits. Mitigation involves updating to the latest version of the framework or replacing it with a more secure alternative.
   A07:2021-Identification and Authentication Failures
         Definition: Identification and Authentication Failures occur when authentication mechanisms fail to properly identify and authenticate users, leading to unauthorized access.
         Mitigation: Implement strong authentication mechanisms such as multi-factor authentication (MFA) and enforce proper credential management practices.
         Example: Weak password policies or lack of multi-factor authentication can lead to identification and authentication failures. Mitigation involves enforcing strong password policies and implementing MFA.
   A08:2021-Software and Data Integrity Failures
         Definition: Software and Data Integrity Failures occur when assumptions related to software updates, critical data, or CI/CD pipelines are made without verifying integrity, leading to potential compromises.
         Mitigation: Implement integrity checks for software updates, critical data, and CI/CD pipelines. Verify the integrity of all components before deploying them.
         Example: If a malicious actor compromises a CI/CD pipeline and injects malicious code into the production environment, it results in software and data integrity failures. Mitigation involves implementing strong controls to prevent unauthorized changes to critical components.
   A09:2021-Security Logging and Monitoring Failures
        Definition: Security Logging and Monitoring Failures occur when logging and monitoring mechanisms are insufficient, making it challenging to detect and respond to security incidents effectively.
        Mitigation: Implement comprehensive logging and monitoring solutions. Ensure logs are generated for all security-relevant events and establish real-time alerting mechanisms.
        Example: If an application fails to log failed authentication attempts or unusual access patterns, it becomes difficult to detect potential security breaches. Mitigation involves implementing logging for all security-relevant events and establishing real-time alerts for suspicious activities.
   A10:2021-Server-Side Request Forgery 
       Definition: Server-Side Request Forgery (SSRF) occurs when an attacker can make the web server send requests to arbitrary destinations controlled by the attacker.
       Mitigation: Implement input validation and sanitization to prevent attackers from manipulating server-side requests. Use whitelisting to restrict the destinations the server can access.
       Example: If an application allows users to specify a URL for server-side processing and does not validate the input properly, it is vulnerable to SSRF attacks. Mitigation involves validating and sanitizing input to prevent attackers from controlling server-side requests.
