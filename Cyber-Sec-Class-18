OWASP TOP 10
============
It's an organization will conduct a survey and list top 10 catagery of the attacks related to application layer(Layer num 7).
OWASP Conducted a survey on : 
=============================
2010, 2013, 2017, 2021.

# Will discuss top 10 attacks as per 2021 data [ https://owasp.org/Top10/ ] :
=============================================================================
    A01:2021-Broken Access Control :
         Definition: Broken access control refers to the failure to enforce proper restrictions on what authenticated users are allowed to do, leading to unauthorized access to sensitive data or functionality.
         Example Attack: An attacker could manipulate the URL or change parameters in a request to access unauthorized resources or perform actions not intended for their role, such as accessing another user's account information.
         Mitigation: Implement proper access controls, including role-based access control (RBAC), enforce least privilege principles, and perform regular security assessments and access control audits. For example, ensure that users can only access resources they are authorized to by checking their permissions and roles before granting access.
    A02:2021-Cryptographic Failures : 
         Cryptographic Failures refer to weaknesses or errors in cryptographic implementations, leading to vulnerabilities such as data breaches or system compromise.
         Mitigation: Use strong encryption algorithms and cryptographic protocols. Implement secure key management practices and ensure proper configuration of cryptographic libraries.
         Example: If an application stores passwords in plain text or uses weak encryption algorithms, it is vulnerable to cryptographic failures. 
                 would involve securely hashing passwords using algorithms like bcrypt and ensuring sensitive data is encrypted properly.
    A03:2021-Injection Flaw attack :
         Definition: Injection vulnerabilities occur when untrusted data is inserted into a command or query, allowing attackers to execute malicious code or commands.
                     94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%,
                     and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition.
         Mitigation: Use parameterized queries or prepared statements to prevent injection attacks. Implement input validation and sanitization to filter out malicious input.
         Example: SQL injection occurs when an attacker inserts malicious SQL commands into input fields, allowing them to retrieve sensitive data from the database or manipulate its contents.
    A04:2021-Insecure Design :
         Definition: Insecure Design refers to flaws in the design of an application that make it vulnerable to various attacks. These flaws cannot be fixed solely through code changes.
         Mitigation: Conduct thorough threat modeling and utilize secure design patterns and principles. Define security requirements early in the development process and ensure they are followed throughout.
         Example: If an application lacks proper authentication and authorization mechanisms from the beginning, it is vulnerable to insecure design. Mitigation involves redesigning the application architecture to incorporate secure authentication and authorization mechanisms.
   A05:2021-Security Misconfiguration :
         Definition: Security Misconfiguration occurs when security settings are improperly configured, leaving vulnerabilities exposed. This can include default configurations, unnecessary features enabled, or missing security patches.
         Mitigation: Follow security best practices for configuring servers, frameworks, and applications. Regularly audit configurations and apply security patches promptly.
         Example: Leaving default passwords unchanged or exposing sensitive information in error messages are examples of security misconfigurations. Mitigation involves changing default passwords and configuring error messages to reveal minimal information.
   A06:2021-Vulnerable and Outdated Components :
         Definition: Vulnerable and Outdated Components refer to the usage of third-party libraries or software components with known security vulnerabilities.
         Mitigation: Regularly update and patch third-party components. Use automated tools to scan for vulnerabilities in dependencies and remove or replace outdated components.
         Example: Using an outdated version of a web framework with known security vulnerabilities exposes the application to potential exploits. Mitigation involves updating to the latest version of the framework or replacing it with a more secure alternative.
   A07:2021-Identification and Authentication Failures : 
         Definition: Identification and Authentication Failures occur when authentication mechanisms fail to properly identify and authenticate users, leading to unauthorized access.
         Mitigation: Implement strong authentication mechanisms such as multi-factor authentication (MFA) and enforce proper credential management practices.
         Example: Weak password policies or lack of multi-factor authentication can lead to identification and authentication failures. Mitigation involves enforcing strong password policies and implementing MFA.
   A08:2021-Software and Data Integrity Failures :
         Definition: Software and Data Integrity Failures occur when assumptions related to software updates, critical data, or CI/CD pipelines are made without verifying integrity, leading to potential compromises.
         Mitigation: Implement integrity checks for software updates, critical data, and CI/CD pipelines. Verify the integrity of all components before deploying them.
         Example: If a malicious actor compromises a CI/CD pipeline and injects malicious code into the production environment, it results in software and data integrity failures. Mitigation involves implementing strong controls to prevent unauthorized changes to critical components.
   A09:2021-Security Logging and Monitoring Failures :
        Definition: Security Logging and Monitoring Failures occur when logging and monitoring mechanisms are insufficient, making it challenging to detect and respond to security incidents effectively.
        Mitigation: Implement comprehensive logging and monitoring solutions. Ensure logs are generated for all security-relevant events and establish real-time alerting mechanisms.
        Example: If an application fails to log failed authentication attempts or unusual access patterns, it becomes difficult to detect potential security breaches. Mitigation involves implementing logging for all security-relevant events and establishing real-time alerts for suspicious activities.
   A10:2021-Server-Side Request Forgery :
       Definition: Server-Side Request Forgery (SSRF) occurs when an attacker can make the web server send requests to arbitrary destinations controlled by the attacker.
       Mitigation: Implement input validation and sanitization to prevent attackers from manipulating server-side requests. Use whitelisting to restrict the destinations the server can access.
       Example: If an application allows users to specify a URL for server-side processing and does not validate the input properly, it is vulnerable to SSRF attacks. Mitigation involves validating and sanitizing input to prevent attackers from controlling server-side requests.

Other Imp Attacks : 
====================
   Cross-Site Request Forgery (CSRF):
   ----------------------------------
     Definition: Cross-Site Request Forgery (CSRF) is a type of attack where an attacker tricks a user into unknowingly executing malicious actions on a web application in which the user is authenticated.
     How it Works: Attackers exploit CSRF vulnerabilities by tricking victims into visiting a malicious website or clicking on a malicious link that performs actions on a target website where the victim is authenticated. The attacker leverages the victim's active session to execute unauthorized actions without their consent.
     Example Attack: An attacker crafts a malicious HTML page containing hidden form fields that mimic legitimate requests to a banking website. The attacker then lures the victim into visiting this page, causing their browser to automatically submit the form and transfer funds from their account to the attacker's account.
    Mitigation:
      Implement anti-CSRF tokens or nonces (unique, unpredictable values) in forms and requests to validate the origin of requests and prevent unauthorized actions.
      Use SameSite cookies to restrict cookie scope and prevent CSRF attacks originating from third-party websites.
      Educate users about the risks of clicking on unfamiliar links or visiting suspicious websites and encourage them to log out of sensitive accounts when not in use.
    Example Mitigation:
      Web developers can include CSRF tokens in forms and AJAX requests to validate the origin of requests and reject those that do not include a valid token. 
      For example, a banking website may include a hidden CSRF token in each form submission, which is validated on the server side before processing the request.
  
   Man-in-the-Middle (MitM):
   -------------------------
     Definition: Man-in-the-middle (MitM) is a type of attack where an attacker intercepts and possibly alters communications between two parties without their knowledge.
     How it Works: Attackers insert themselves between the communication flow of two parties, intercepting and potentially modifying the data being exchanged.
                  This can occur in various scenarios, such as insecure Wi-Fi networks, compromised routers, or malicious software.
     Example Attack: An attacker sets up a rogue Wi-Fi access point with a legitimate-sounding name in a public area. When unsuspecting users connect to this access point, the attacker can intercept their traffic, including sensitive information like login credentials or financial data.
       Mitigation:
         Use secure communication protocols like HTTPS, SSH, or VPNs to encrypt data in transit and prevent interception.
         Employ techniques like certificate pinning and mutual authentication to verify the identities of communicating parties and detect MitM attacks.
         Educate users about the risks of connecting to untrusted networks and encourage them to use trusted connections and security best practices.
       Example Mitigation: 
         Organizations can implement strict firewall rules to block unauthorized network traffic and detect and log suspicious activities indicative of MitM attacks.
         For example, network intrusion detection systems (NIDS) can be configured to alert administrators when unusual network traffic patterns are detected.

   Buffer Overflow:
   ----------------
     Definition: Buffer overflow is a type of vulnerability where a program writes more data to a buffer (temporary storage area) than it can hold, leading to memory corruption and potential execution of malicious code.
     How it Works: Attackers exploit buffer overflow vulnerabilities by sending specially crafted input data to a program, causing it to overwrite adjacent memory locations with malicious code. This code can then be executed to gain unauthorized access or control over the system.
     Example Attack: An attacker may exploit a buffer overflow vulnerability in a web server by sending a carefully crafted HTTP request containing excessive data. This can overwrite critical memory structures, leading to a crash or arbitrary code execution.
      Mitigation:
        Use programming languages that provide memory safety features, such as bounds checking.
        Implement input validation and sanitization to ensure that only expected data is accepted.
        Employ techniques like address space layout randomization (ASLR) and stack canaries to make it harder for attackers to exploit buffer overflow vulnerabilities.
      Example Mitigation:
        Update vulnerable software with patches provided by vendors to fix known buffer overflow vulnerabilities. For example, if a web server software is found to have a buffer overflow vulnerability, the vendor may release a patch to address the issue.

   Session Hijacking:
   ------------------
     Definition: Session hijacking is a type of attack where an attacker intercepts and takes over an active session between a user and a web application, allowing them to impersonate the user and perform actions on their behalf.
     How it Works: Attackers can hijack sessions by stealing session identifiers, such as session cookies, through various means like packet sniffing, session fixation, or cross-site scripting (XSS) attacks. Once obtained, the attacker can use these identifiers to impersonate the victim and gain unauthorized access to their account.
     Example Attack: An attacker intercepts network traffic between a user and a web application using a tool like Wireshark. They identify and capture the session cookie sent by the application during login. With this cookie, the attacker can then impersonate the user and access sensitive information or perform malicious actions.
       Mitigation:
         Implement secure session management practices, such as using HTTPS to encrypt traffic and secure cookies with flags like Secure and HttpOnly.
         Employ mechanisms like session expiration, re-authentication for sensitive actions, and IP address verification to detect and prevent session hijacking attempts.
         Use techniques like session token rotation and cryptographic measures to make session identifiers resistant to theft and replay attacks.
       Example Mitigation: 
         Implementing session tokens with short expiration times and regularly rotating them can limit the window of opportunity for attackers to hijack sessions. For example, a web application may generate a new session token for each login and invalidate old tokens after a short period of inactivity.

# How Owasp organization identify the top 10 attacks ?
=======================================================
     Owasp organization identify the top 10 attacks based on CWE and CVE Scores.
      CWE : Common Weakness Enumeration  ( On application side will use CWE)
      CVE : Common Vulnerabilities and Exposures ( Server side we will use CVE)

# Diff between CWE and CVE ?
-----------------------------
    CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) are both used in the realm of cybersecurity, but they serve different purposes and can be applied to different aspects of security, including both server-side and application-side vulnerabilities:
      CWE (Common Weakness Enumeration):
      ----------------------------------
        Usage: CWE is primarily used during the development and testing phases of software to identify, understand, and mitigate common weaknesses or vulnerabilities in code.
        Application: CWE is applicable to both server-side and application-side vulnerabilities. It helps developers and security professionals classify and categorize weaknesses in software, regardless of whether they occur on the server or client side.
        Example: CWE might be used to identify and address issues like buffer overflows, SQL injection, cross-site scripting (XSS), or insecure authentication mechanisms in server-side code (e.g., web server applications) or application-side code (e.g., web browsers or mobile apps).

    CVE (Common Vulnerabilities and Exposures):
    -------------------------------------------
        Usage: CVE is primarily used to track and reference publicly known vulnerabilities in software systems, hardware devices, or network infrastructure.
        Application: CVE is applicable to vulnerabilities discovered in various components of IT systems, including server-side software, application-side software, operating systems, network devices, and firmware.
        Example: CVE might be assigned to vulnerabilities like remote code execution in a web server application, SQL injection in a database management system, XSS in a web application, or buffer overflow in a network protocol implementation.

    In summary:
    -----------
       CWE is used to classify and describe weaknesses or vulnerabilities in software during the development and testing phases, applicable to both server-side and application-side code.
       CVE is used to uniquely identify and track publicly known vulnerabilities in various components of IT systems, including server-side software, application-side software, and other infrastructure components.
